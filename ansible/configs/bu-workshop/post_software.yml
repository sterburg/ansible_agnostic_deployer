# vim: set ft=ansible:
---

- name: Workshop prerequisites
  hosts: 
    - tag_bu_workshop_openshift_master
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_prereq
  tasks:
    - name: Check for workshop-infra project
      command: "{{ oc_path }}  get project workshop-infra"

      register: result
      ignore_errors: true

    - name: Create workshop-infra project
      command: "{{ oc_path }} adm new-project workshop-infra --admin admin --node-selector='env=infra'"

      when: result | failed

    - name: Make workshop-infra project network global
      command: "{{ oc_path }} adm pod-network make-projects-global workshop-infra"

    - name: Set workshop-infra SCC for anyuid
      command: "{{ oc_path }} adm policy add-scc-to-group anyuid system:serviceaccounts:workshop-infra"

    - name: Add capabilities within anyuid which is not really ideal
      command: "{{ oc_path }} patch scc/anyuid --patch '{\"requiredDropCapabilities\":[\"MKNOD\",\"SYS_CHROOT\"]}'"

    #TODO: Switch to official Java builder
    - name: Copy RH official JDK IS to server
      copy:
        src: "files/openjdk-is.yaml"
        dest: "/root/openjdk-is.yaml"

    - name: Create RH official JDK IS in openshift namespace
      shell: "{{ oc_path }} create -f /root/openjdk-is.yaml -n openshift || {{ oc_path }} replace -f /root/openjdk-is.yaml -n openshift"

    - name: Copy simple-java-s2i IS to server
      copy:
        src: "files/java-s2i-is.yaml"
        dest: "/root/java-s2i-is.yaml"
      tags:
        - copy-java-s2i-is

    - name: Create simple-java-s2i IS in openshift namespace
      shell: "{{ oc_path }} create -f /root/java-s2i-is.yaml -n openshift || {{ oc_path }} replace -f /root/java-s2i-is.yaml -n openshift"
      tags:
        - create-java-s2i-is

    - name: Create Jenkins pipeline template in openshift namespace
      shell: "{{ oc_path }} create -f https://raw.githubusercontent.com/openshift-roadshow/nationalparks/1.0.0/ose3/pipeline-template.yaml -n openshift || {{ oc_path }} replace -f https://raw.githubusercontent.com/openshift-roadshow/nationalparks/1.0.0/ose3/pipeline-template.yaml -n openshift"
      tags:
        - create-pipeline-template

- name: Nexus server
  hosts: 
    - tag_bu_workshop_openshift_master
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_nexus
  tasks:

    - name: Copy nexus.yaml to master
      copy:
        src: "files/nexus.yaml"
        dest: "/root/nexus.yaml"

    - name: Check if Nexus was already provisioned
      command: "{{ oc_path }} get service nexus -n workshop-infra"

      register: install_nexus
      ignore_errors: true

    - name: Instantiate nexus from template
      command: "{{ oc_path }} create -f /root/nexus.yaml -n workshop-infra"

      when: install_nexus | failed

    # looks like we need a better check - it seems we're ready up to several
    # seconds before the router finds out about us, so we might want another
    # http check to make sure nexus is responding
    - name: Wait for Nexus to be running
      command: "{{ oc_path }} get dc/nexus -o yaml -n workshop-infra"

      register: result
      until: '"availableReplicas: 1" in result.stdout'
      retries: 5
      delay: 60

    - name: Wait for Nexus to be happy
      uri:
        url: "http://nexus.workshop-infra.svc.cluster.local:8081/content/repositories/"
        status_code: 200
      register: nexus_happy
      until: nexus_happy | success
      retries: 5
      delay: 60

    - name: Copy Nexus addrepo script
      copy:
        src: "files/addrepo.sh"
        dest: "/root/addrepo.sh"

    - name: Check for redhat-ga repository in Nexus
      uri:
        url: "http://nexus.workshop-infra.svc.cluster.local:8081/content/repositories/redhat-ga"
        status_code: 200
      register: redhat_ga_out
      ignore_errors: true

    - name: Add redhat-ga repository for Nexus
      shell: "NEXUS_BASE_URL=nexus.workshop-infra.svc.cluster.local:8081 bash /root/addrepo.sh redhat-ga https://maven.repository.redhat.com/ga/"
      when: redhat_ga_out | failed

    - name: Check for JBoss repository in Nexus
      uri:
        url: "http://nexus.workshop-infra.svc.cluster.local:8081/content/repositories/jboss"
        status_code: 200
      register: redhat_ga_out
      ignore_errors: true

    - name: Add redhat-ga repository for Nexus
      shell: "NEXUS_BASE_URL=nexus.workshop-infra.svc.cluster.local:8081 bash /root/addrepo.sh jboss https://repository.jboss.org/nexus/content/repositories/public"
      when: redhat_ga_out | failed

- name: Gitlab
  hosts: 
    - tag_bu_workshop_openshift_master
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_gitlab
  tasks:
    - name: Copy gitlab-template.yaml to master
      copy:
        src: "files/gitlab-template.yaml"
        dest: "/root/gitlab-template.yaml"

    - name: Check if Gitlab was already provisioned
      command: "{{ oc_path }} get service gitlab-ce -n workshop-infra"

      register: install_gitlab
      ignore_errors: true

    - name: Instantiate Gitlab from template
      shell: >
        {{ oc_path }} process -f /root/gitlab-template.yaml
        -v APPLICATION_HOSTNAME=gitlab-ce-workshop-infra.{{ cloudapps_suffix }}
        -v GITLAB_ROOT_PASSWORD=password | {{ oc_path }} create -f - -n workshop-infra

      when: install_gitlab | failed
      tags:
        - instantiate-gitlab

    - name: Scale gitlab to four instances
      command: "{{ oc_path }} scale dc/gitlab-ce --replicas=4 -n workshop-infra"

    - name: Wait for Gitlab to be running
      command: "{{ oc_path }} get dc/gitlab-ce -o yaml -n workshop-infra"

      register: result
      until: '" availableReplicas: 4" in result.stdout'
      retries: 8
      delay: 60
      tags:
        - wait-for-gitlab

# This was added by "PR #21"
#https://github.com/sborenst/ansible_agnostic_deployer/pull/21
    - name: Annotate gitlab service to group database
      shell: >
        {{ oc_path }} annotate service gitlab-ce
        service.alpha.openshift.io/dependencies='[{"name":"gitlab-ce-postgresql","namespace":"","kind":"Service"},{"name":"gitlab-ce-redis","namespace":"","kind":"Service"}]' 
        --overwrite
        -n workshop-infra
        
 #Commented out in PR #21 Merge
    - name: Copy simple-java-s2i IS to server
      copy:
        src: "files/java-s2i-is.yaml"
        dest: "/root/java-s2i-is.yaml"
      tags:
        - copy-java-s2i-is

    - name: Create simple-java-s2i IS in openshift namespace
      shell: "{{ oc_path }} create -f /root/java-s2i-is.yaml -n openshift || {{ oc_path }} replace -f /root/java-s2i-is.yaml -n openshift"

      tags:
        - create-java-s2i-is

    - name: Create Jenkins pipeline template in openshift namespace
      shell: "{{ oc_path }} create -f https://raw.githubusercontent.com/openshift-roadshow/nationalparks/1.0.0/ose3/pipeline-template.yaml -n openshift || {{ oc_path }} replace -f https://raw.githubusercontent.com/openshift-roadshow/nationalparks/1.0.0/ose3/pipeline-template.yaml -n openshift"

      tags:
        - create-pipeline-template
 #Commented out in PR #21 Merge

- name: Lab guide
  hosts: 
    - tag_bu_workshop_openshift_master
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_lab_guide
  tasks:
    - name: Check for workshop lab build
      command: "{{ oc_path }} get svc/labs -n workshop-infra"

      ignore_errors: true
      register: labs_service_out

    - name: Build workshop lab server
      shell: >
        {{ oc_path }} new-app
        --name=labs jboss-eap70-openshift~{{ lab_url }}#{{ lab_tag }}
        -e ROUTER_ADDRESS={{cloudapps_suffix}}
        -e CONSOLE_ADDRESS=master.{{subdomain_base}}
        -e DEFAULT_LAB=roadshow
        -e NUM_NODES={{ num_nodes }}
        -e NUM_USERS={{ user_vols }}
        -e WORKSHOPS_URLS={{ lab_content }}
        -n workshop-infra;
        {{ oc_path }} expose service labs -n workshop-infra

      when: labs_service_out | failed
      tags:
        - build-workshop-labs


- name: Project Request Template
  hosts: 
    - tag_bu_workshop_openshift_master
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - project_request
  tasks:

    - name: Copy project request template to master
      copy:
        src: files/project-template.yaml
        dest: /root/project-template.yaml


    - name: Create project request template in default project
      shell: "{{ oc_path }} create -f /root/project-template.yaml -n default || {{ oc_path }} replace -f /root/project-template.yaml -n default"

- name: Workshop Users
  hosts: 
    - localhost
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_users
  tasks:

    - name: Copy vars file to master
      copy:
        src: "env_vars.yml"
        dest: "/tmp/{{ env_type }}_vars.yml"

    - name: Copy user provision Ansible script remotely
      copy:
        src: "files/userprovision.yaml"
        dest: "/tmp/userprovision.yaml"

    - name: Set Gitlab internal hostname
      set_fact:
        gitlab_hostname: 'gitlab-ce-workshop-infra.publicpaas.openshift.openline.nl'

    - name: Get root user token
      uri:
        url: 'http://gitlab-ce-workshop-infra.publicpaas.openshift.openline.nl/api/v3/session'
        body: 'login=root&password=password'
        method: POST
        status_code: 201
      register: root_token_out
      until: root_token_out|success
      retries: 3
      delay: 60

    - name: Create root token fact
      set_fact:
        root_token: '{{ root_token_out.json.private_token }}'

    - name: Execute user provision Ansible script remotely
      shell: >
        ansible-playbook
        -i localhost /tmp/userprovision.yaml
        -e config={{ env_type }}
        -e user={{ item }}
        -e root_token={{ root_token }}
        -e gitlab_hostname={{ gitlab_hostname }}
      with_sequence: start=0 end={{ user_vols }} format=%02d

- name: Deploy etherpad
  hosts: 
    - tag_bu_workshop_openshift_master
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_etherpad
  tasks:
    - name: Check if MySQL for etherpad was already provisioned
      command: "{{ oc_path }} get service mysql-pad -n workshop-infra"
      register: install_pad_db
      ignore_errors: true

    - name: Etherpad MySQL
      shell: >
        {{ oc_path }} new-app 
        --name=mysql-pad
        --template=mysql-ephemeral
        -p MYSQL_USER=etherpad
        -p MYSQL_PASSWORD=etherpad
        -p MYSQL_DATABASE=etherpad
        -p DATABASE_SERVICE_NAME=mysql-pad
        -n workshop-infra
      when: install_pad_db | failed

    - name: Wait for Etherpad MySQL to be running
      command: "{{ oc_path }} get dc/mysql-pad -o yaml -n workshop-infra"
      register: result
      until: '"availableReplicas: 1" in result.stdout'
      retries: 5
      delay: 60

    - name: Check if Etherpad was already provisioned
      command: "{{ oc_path }} get service etherpad -n workshop-infra"
      register: install_pad
      ignore_errors: true

    # TODO: etherpad template or health check or something
    - name: Deploy Etherpad Docker image
      shell: >
        {{ oc_path }} new-app
        --name=etherpad
        centos/etherpad
        -e DB_HOST=mysql-pad
        -e DB_DBID=etherpad
        -e DB_PASS=etherpad
        -e DB_USER=etherpad
        -e DB_PORT=3306
        -n workshop-infra
      when: install_pad | failed

    - name: Wait for Etherpad to be running
      command: "{{ oc_path }} get dc/etherpad -o yaml -n workshop-infra"
      register: result
      until: '"availableReplicas: 1" in result.stdout'
      retries: 5
      delay: 60

    - name: Expose etherpad service
      shell: "{{ oc_path }} expose service etherpad -n workshop-infra"
      when: install_pad | failed

    - name: Annotate etherpad service to group database
      shell: >
        {{ oc_path }} annotate service etherpad 
        service.alpha.openshift.io/dependencies='[{"name":"mysql-pad","namespace":"","kind":"Service"}]' 
        --overwrite
        -n workshop-infra

    # TODO: curl command to create default pad

- name: Cache Java dependencies
  hosts: 
    - tag_bu_workshop_openshift_master
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  vars:
    workshop_repos:
      - "nationalparks"
      - "mlbparks"
      - "parksmap-web"
  tags:
    - workshop
    - workshop_java_dependencies
  tasks:
    - name: Install Maven and Java
      yum:
        name: '{{ item }}'
        state: present
        enablerepo: "rhel-7-server-optional-rpms"
      with_items:
        - "maven"
        - "java-1.8.0-openjdk-devel"

    - name: Remove m2 folder
      file:
        path: "/home/ec2-user/.m2/repository"
        state: absent

    - name: Make repos directory
      file:
        path: "/home/ec2-user/repos"
        state: directory

    - name: Clone app repositories
      git:
        repo: 'https://github.com/openshift-roadshow/{{ item }}'
        dest: "/home/ec2-user/repos/{{ item }}"
      with_items:
        - '{{ workshop_repos }}'

    - name: Deploy maven settings file
      template:
        src: "files/maven.xml.j2"
        dest: "/home/ec2-user/maven.xml"
        mode: 0755
        owner: ec2-user

    - name: Build and cache dependencies
      shell: >
        mvn -q -s /home/ec2-user/maven.xml -f /home/ec2-user/repos/{{ item }}/pom.xml install
      with_items:
        - '{{ workshop_repos }}'

